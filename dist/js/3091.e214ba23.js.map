{"version":3,"file":"js/3091.e214ba23.js","mappings":"0LACO,MAAMA,UAAkBC,EAAAA,GAC3BC,WAAAA,GACIC,QACAC,KAAKC,MAAO,CAChB,CACAC,IAAAA,CAAKC,GACIA,IAGLJ,MAAMG,KAAKC,QACOC,IAAdD,EAAKF,OACLD,KAAKC,KAAOE,EAAKF,MAEzB,ECbG,MAAMI,UAAqBR,EAAAA,GAC9BC,WAAAA,GACIC,QACAC,KAAKC,MAAO,CAChB,CACAC,IAAAA,CAAKC,GACIA,IAGLJ,MAAMG,KAAKC,QACOC,IAAdD,EAAKF,OACLD,KAAKC,KAAOE,EAAKF,MAEzB,ECZG,MAAMK,EACTR,WAAAA,GACIE,KAAKO,MAAQ,EACbP,KAAKQ,MAAQ,IAAIZ,EACjBI,KAAKS,SAAW,IAAIJ,CACxB,CACAH,IAAAA,CAAKC,GACIA,SAGcC,IAAfD,EAAKI,QACLP,KAAKO,MAAQJ,EAAKI,OAEtBP,KAAKQ,MAAMN,KAAKC,EAAKK,OACrBR,KAAKS,SAASP,KAAKC,EAAKM,UAC5B,EChBJ,MAAMC,EAAS,EAAGC,GAAiB,EAAGC,EAAS,EAAGC,EAAgB,EAC3D,SAASC,EAAWC,EAAUC,EAAOC,GACxC,IAAKF,EAASG,KACV,OAEJ,MAAMA,EAAOH,EAASG,KACtB,IAAIC,GAAc,EAClB,GAAIJ,EAASK,SAAU,CAEnB,GADAF,EAAKG,WAAaL,EAAMM,QACpBJ,EAAKG,WAAaN,EAASG,KAAKV,OAOhC,OANAW,GAAc,EACdJ,EAASK,UAAW,EACpBF,EAAKG,UAAYX,EACjBQ,EAAKK,KAAOb,CAKpB,CACA,GAAIQ,EAAKT,WAAaE,EAClB,OAEJ,GAAII,EAASK,SACT,OAQJ,GANID,EACAD,EAAKK,KAAOb,EAGZQ,EAAKK,MAAQP,EAAMM,MAEnBJ,EAAKK,KAAOL,EAAKT,SACjB,OAMJ,GAJAS,EAAKK,KAAOb,EACRK,EAASG,KAAKX,MAAQK,GACtBG,EAASG,KAAKX,QAEdQ,EAASG,KAAKX,QAAUK,EAExB,YADAG,EAASS,UAGb,MAAMC,GAAaC,EAAAA,EAAAA,IAAcb,EAAeI,EAAWU,OAAQC,GAAcF,EAAAA,EAAAA,IAAcb,EAAeI,EAAWU,OACzHZ,EAASc,SAASC,GAAIC,EAAAA,EAAAA,IAAcN,GACpCV,EAASc,SAASG,GAAID,EAAAA,EAAAA,IAAcH,GACpCb,EAASK,UAAW,EACpBF,EAAKG,UAAYX,EACjBQ,EAAKK,KAAOb,EACZK,EAASkB,QACT,MAAMC,EAAcnB,EAASoB,QAAQjB,KACjCgB,IACAhB,EAAKV,OAAQ4B,EAAAA,EAAAA,IAAcF,EAAY1B,MAAMc,OAASe,EAAAA,GACtDnB,EAAKT,UAAW2B,EAAAA,EAAAA,IAAcF,EAAYzB,SAASa,OAASe,EAAAA,GAEpE,CCpDA,MAAM3B,EAAS,EAAG4B,EAAW,EAAG3B,GAAiB,EAC1C,MAAM4B,EACTzC,WAAAA,CAAY0C,GACRxC,KAAKwC,UAAYA,CACrB,CACAC,IAAAA,CAAK1B,GACD,MAAMyB,EAAYxC,KAAKwC,UAAWE,EAAmB3B,EAASoB,QAASD,EAAcQ,EAAiBxB,KACjGgB,IAGLnB,EAASG,KAAO,CACZV,MAAOgC,EAAUG,OAAOC,cAChBR,EAAAA,EAAAA,IAAcF,EAAY1B,MAAMc,QAAUY,EAAY1B,MAAMP,KAAOqC,GAAWO,EAAAA,EAAAA,OAC9EL,EAAUG,OAAOC,aACjBP,EAAAA,GACF3B,EACNW,UAAWX,EACXD,SAAU+B,EAAUG,OAAOC,cACnBR,EAAAA,EAAAA,IAAcF,EAAYzB,SAASa,QAAUY,EAAYzB,SAASR,KAAOqC,GAAWO,EAAAA,EAAAA,OACpFL,EAAUG,OAAOC,aACjBP,EAAAA,GACF3B,EACNa,KAAMb,EACNH,MAAO2B,EAAY3B,OAEnBQ,EAASG,KAAKT,UAAYC,IAC1BK,EAASG,KAAKT,SAAWE,GAEzBI,EAASG,KAAKX,OAASG,IACvBK,EAASG,KAAKX,MAAQI,GAEtBI,EAASG,OACTH,EAASK,SAAWL,EAASG,KAAKV,MAAQE,GAElD,CACAoC,SAAAA,CAAU/B,GACN,OAAQA,EAASgC,SACrB,CACAC,WAAAA,CAAYb,KAAYc,GACfd,EAAQjB,OACTiB,EAAQjB,KAAO,IAAIZ,GAEvB,IAAK,MAAM4C,KAAUD,EACjBd,EAAQjB,KAAKhB,KAAKgD,GAAQhC,KAElC,CACAiC,MAAAA,CAAOpC,EAAUC,GACRhB,KAAK8C,UAAU/B,IAAcA,EAASG,MAG3CJ,EAAWC,EAAUC,EAAOhB,KAAKwC,UAAUY,OAAOC,KACtD,E","sources":["webpack://protfolio-front-1/./node_modules/@tsparticles/updater-life/browser/Options/Classes/LifeDelay.js","webpack://protfolio-front-1/./node_modules/@tsparticles/updater-life/browser/Options/Classes/LifeDuration.js","webpack://protfolio-front-1/./node_modules/@tsparticles/updater-life/browser/Options/Classes/Life.js","webpack://protfolio-front-1/./node_modules/@tsparticles/updater-life/browser/Utils.js","webpack://protfolio-front-1/./node_modules/@tsparticles/updater-life/browser/LifeUpdater.js"],"sourcesContent":["import { ValueWithRandom } from \"@tsparticles/engine\";\nexport class LifeDelay extends ValueWithRandom {\n    constructor() {\n        super();\n        this.sync = false;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        super.load(data);\n        if (data.sync !== undefined) {\n            this.sync = data.sync;\n        }\n    }\n}\n","import { ValueWithRandom } from \"@tsparticles/engine\";\nexport class LifeDuration extends ValueWithRandom {\n    constructor() {\n        super();\n        this.sync = false;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        super.load(data);\n        if (data.sync !== undefined) {\n            this.sync = data.sync;\n        }\n    }\n}\n","import { LifeDelay } from \"./LifeDelay.js\";\nimport { LifeDuration } from \"./LifeDuration.js\";\nexport class Life {\n    constructor() {\n        this.count = 0;\n        this.delay = new LifeDelay();\n        this.duration = new LifeDuration();\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.count !== undefined) {\n            this.count = data.count;\n        }\n        this.delay.load(data.delay);\n        this.duration.load(data.duration);\n    }\n}\n","import { getRangeValue, millisecondsToSeconds, randomInRange, setRangeValue, } from \"@tsparticles/engine\";\nconst noTime = 0, infiniteValue = -1, noLife = 0, minCanvasSize = 0;\nexport function updateLife(particle, delta, canvasSize) {\n    if (!particle.life) {\n        return;\n    }\n    const life = particle.life;\n    let justSpawned = false;\n    if (particle.spawning) {\n        life.delayTime += delta.value;\n        if (life.delayTime >= particle.life.delay) {\n            justSpawned = true;\n            particle.spawning = false;\n            life.delayTime = noTime;\n            life.time = noTime;\n        }\n        else {\n            return;\n        }\n    }\n    if (life.duration === infiniteValue) {\n        return;\n    }\n    if (particle.spawning) {\n        return;\n    }\n    if (justSpawned) {\n        life.time = noTime;\n    }\n    else {\n        life.time += delta.value;\n    }\n    if (life.time < life.duration) {\n        return;\n    }\n    life.time = noTime;\n    if (particle.life.count > noLife) {\n        particle.life.count--;\n    }\n    if (particle.life.count === noLife) {\n        particle.destroy();\n        return;\n    }\n    const widthRange = setRangeValue(minCanvasSize, canvasSize.width), heightRange = setRangeValue(minCanvasSize, canvasSize.width);\n    particle.position.x = randomInRange(widthRange);\n    particle.position.y = randomInRange(heightRange);\n    particle.spawning = true;\n    life.delayTime = noTime;\n    life.time = noTime;\n    particle.reset();\n    const lifeOptions = particle.options.life;\n    if (lifeOptions) {\n        life.delay = getRangeValue(lifeOptions.delay.value) * millisecondsToSeconds;\n        life.duration = getRangeValue(lifeOptions.duration.value) * millisecondsToSeconds;\n    }\n}\n","import { getRandom, getRangeValue, millisecondsToSeconds, } from \"@tsparticles/engine\";\nimport { Life } from \"./Options/Classes/Life.js\";\nimport { updateLife } from \"./Utils.js\";\nconst noTime = 0, identity = 1, infiniteValue = -1;\nexport class LifeUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    init(particle) {\n        const container = this.container, particlesOptions = particle.options, lifeOptions = particlesOptions.life;\n        if (!lifeOptions) {\n            return;\n        }\n        particle.life = {\n            delay: container.retina.reduceFactor\n                ? ((getRangeValue(lifeOptions.delay.value) * (lifeOptions.delay.sync ? identity : getRandom())) /\n                    container.retina.reduceFactor) *\n                    millisecondsToSeconds\n                : noTime,\n            delayTime: noTime,\n            duration: container.retina.reduceFactor\n                ? ((getRangeValue(lifeOptions.duration.value) * (lifeOptions.duration.sync ? identity : getRandom())) /\n                    container.retina.reduceFactor) *\n                    millisecondsToSeconds\n                : noTime,\n            time: noTime,\n            count: lifeOptions.count,\n        };\n        if (particle.life.duration <= noTime) {\n            particle.life.duration = infiniteValue;\n        }\n        if (particle.life.count <= noTime) {\n            particle.life.count = infiniteValue;\n        }\n        if (particle.life) {\n            particle.spawning = particle.life.delay > noTime;\n        }\n    }\n    isEnabled(particle) {\n        return !particle.destroyed;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.life) {\n            options.life = new Life();\n        }\n        for (const source of sources) {\n            options.life.load(source?.life);\n        }\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle) || !particle.life) {\n            return;\n        }\n        updateLife(particle, delta, this.container.canvas.size);\n    }\n}\n"],"names":["LifeDelay","ValueWithRandom","constructor","super","this","sync","load","data","undefined","LifeDuration","Life","count","delay","duration","noTime","infiniteValue","noLife","minCanvasSize","updateLife","particle","delta","canvasSize","life","justSpawned","spawning","delayTime","value","time","destroy","widthRange","setRangeValue","width","heightRange","position","x","randomInRange","y","reset","lifeOptions","options","getRangeValue","millisecondsToSeconds","identity","LifeUpdater","container","init","particlesOptions","retina","reduceFactor","getRandom","isEnabled","destroyed","loadOptions","sources","source","update","canvas","size"],"sourceRoot":""}