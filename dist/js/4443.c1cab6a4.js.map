{"version":3,"file":"js/4443.c1cab6a4.js","mappings":"6LACO,MAAMA,EACTC,WAAAA,GACIC,KAAKC,QAAS,EACdD,KAAKE,UAAY,IACjBF,KAAKG,QAAU,CACnB,CACAC,IAAAA,CAAKC,GACIA,SAGcC,IAAfD,EAAKE,QACLP,KAAKO,MAAQC,EAAAA,GAAaC,OAAOT,KAAKO,MAAOF,EAAKE,aAElCD,IAAhBD,EAAKJ,SACLD,KAAKC,OAASI,EAAKJ,aAEAK,IAAnBD,EAAKH,YACLF,KAAKE,UAAYG,EAAKH,gBAELI,IAAjBD,EAAKF,UACLH,KAAKG,SAAUO,EAAAA,EAAAA,IAAcL,EAAKF,UAE1C,ECtBG,MAAMQ,EACTZ,WAAAA,GACIC,KAAKY,MAAQ,IAAId,EACjBE,KAAKa,UAAY,IAAIf,CACzB,CACAM,IAAAA,CAAKC,GACIA,IAGLL,KAAKY,MAAMR,KAAKC,EAAKO,OACrBZ,KAAKa,UAAUT,KAAKC,EAAKQ,WAC7B,ECVG,MAAMC,EACTC,cAAAA,CAAeC,EAAUC,EAASC,EAAQf,GACtC,MAAMgB,EAAWH,EAASI,QAASC,EAAiBF,EAASG,QAC7D,IAAKD,EACD,MAAO,CAAC,EAEZ,MAAMC,EAAUD,EAAeR,UAAWU,EAAYD,EAAQrB,SAAUuB,EAAAA,EAAAA,MAAcF,EAAQpB,UAAWuB,EAAgBT,EAASI,QAAQM,OAAQC,EAAU,EAAGC,GAAkBD,EAAUX,EAASa,eAAiBJ,EAAcK,YAAaC,EAAmBR,GAAYS,EAAAA,EAAAA,IAAcV,EAAQnB,SAAWyB,EAAiBzB,EAAS8B,GAAaC,EAAAA,EAAAA,IAAgBZ,EAAQf,OAAQ4B,EAAeF,GAAaG,EAAAA,EAAAA,IAAgBH,EAAYF,QAAoBzB,EAAW+B,EAAM,CAAC,EAAGC,EAAef,GAAaY,EAGpf,OAFAE,EAAIE,KAAOD,EAAeH,OAAe7B,EACzC+B,EAAIG,OAASF,EAAeH,OAAe7B,EACpC+B,CACX,CACA,UAAMI,SACIC,QAAQC,SAClB,CACAC,SAAAA,CAAU5B,GACN,MAAMG,EAAWH,EAASI,QAASC,EAAiBF,EAASG,QAC7D,QAAKD,GAGEA,EAAeR,UAAUZ,MACpC,CACA4C,WAAAA,CAAYzB,KAAY0B,GACf1B,EAAQE,UACTF,EAAQE,QAAU,IAAIX,GAE1B,IAAK,MAAMoC,KAAUD,EACjB1B,EAAQE,QAAQlB,KAAK2C,GAAQzB,QAErC,CACA,YAAM0B,SACIN,QAAQC,SAClB,E","sources":["webpack://protfolio-front-1/./node_modules/@tsparticles/updater-twinkle/browser/Options/Classes/TwinkleValues.js","webpack://protfolio-front-1/./node_modules/@tsparticles/updater-twinkle/browser/Options/Classes/Twinkle.js","webpack://protfolio-front-1/./node_modules/@tsparticles/updater-twinkle/browser/TwinkleUpdater.js"],"sourcesContent":["import { OptionsColor, setRangeValue, } from \"@tsparticles/engine\";\nexport class TwinkleValues {\n    constructor() {\n        this.enable = false;\n        this.frequency = 0.05;\n        this.opacity = 1;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.color !== undefined) {\n            this.color = OptionsColor.create(this.color, data.color);\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.frequency !== undefined) {\n            this.frequency = data.frequency;\n        }\n        if (data.opacity !== undefined) {\n            this.opacity = setRangeValue(data.opacity);\n        }\n    }\n}\n","import { TwinkleValues } from \"./TwinkleValues.js\";\nexport class Twinkle {\n    constructor() {\n        this.lines = new TwinkleValues();\n        this.particles = new TwinkleValues();\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        this.lines.load(data.lines);\n        this.particles.load(data.particles);\n    }\n}\n","import { getRandom, getRangeValue, getStyleFromHsl, rangeColorToHsl, } from \"@tsparticles/engine\";\nimport { Twinkle } from \"./Options/Classes/Twinkle.js\";\nexport class TwinkleUpdater {\n    getColorStyles(particle, context, radius, opacity) {\n        const pOptions = particle.options, twinkleOptions = pOptions.twinkle;\n        if (!twinkleOptions) {\n            return {};\n        }\n        const twinkle = twinkleOptions.particles, twinkling = twinkle.enable && getRandom() < twinkle.frequency, zIndexOptions = particle.options.zIndex, zOffset = 1, zOpacityFactor = (zOffset - particle.zIndexFactor) ** zIndexOptions.opacityRate, twinklingOpacity = twinkling ? getRangeValue(twinkle.opacity) * zOpacityFactor : opacity, twinkleRgb = rangeColorToHsl(twinkle.color), twinkleStyle = twinkleRgb ? getStyleFromHsl(twinkleRgb, twinklingOpacity) : undefined, res = {}, needsTwinkle = twinkling && twinkleStyle;\n        res.fill = needsTwinkle ? twinkleStyle : undefined;\n        res.stroke = needsTwinkle ? twinkleStyle : undefined;\n        return res;\n    }\n    async init() {\n        await Promise.resolve();\n    }\n    isEnabled(particle) {\n        const pOptions = particle.options, twinkleOptions = pOptions.twinkle;\n        if (!twinkleOptions) {\n            return false;\n        }\n        return twinkleOptions.particles.enable;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.twinkle) {\n            options.twinkle = new Twinkle();\n        }\n        for (const source of sources) {\n            options.twinkle.load(source?.twinkle);\n        }\n    }\n    async update() {\n        await Promise.resolve();\n    }\n}\n"],"names":["TwinkleValues","constructor","this","enable","frequency","opacity","load","data","undefined","color","OptionsColor","create","setRangeValue","Twinkle","lines","particles","TwinkleUpdater","getColorStyles","particle","context","radius","pOptions","options","twinkleOptions","twinkle","twinkling","getRandom","zIndexOptions","zIndex","zOffset","zOpacityFactor","zIndexFactor","opacityRate","twinklingOpacity","getRangeValue","twinkleRgb","rangeColorToHsl","twinkleStyle","getStyleFromHsl","res","needsTwinkle","fill","stroke","init","Promise","resolve","isEnabled","loadOptions","sources","source","update"],"sourceRoot":""}