{"version":3,"file":"js/634.61a206b0.js","mappings":"2LACA,MAAMA,EAAS,EACR,MAAMC,UAAmBC,EAAAA,GAC5BC,WAAAA,CAAYC,EAAGC,EAAGC,EAAQC,GACtBC,MAAMJ,EAAGC,EAAGC,GACZG,KAAKF,WAAaA,EAClBE,KAAKF,WAAa,IAAKA,EAC3B,CACAG,QAAAA,CAASC,GACL,MAAM,MAAEC,EAAK,OAAEC,GAAWJ,KAAKF,YAAY,EAAEH,EAAC,EAAEC,GAAMM,EACtD,OAAQH,MAAME,SAASC,IACnBH,MAAME,SAAS,CAAEN,EAAGA,EAAIQ,EAAOP,OAC/BG,MAAME,SAAS,CAAEN,EAAGA,EAAIQ,EAAOP,EAAGA,EAAIQ,KACtCL,MAAME,SAAS,CAAEN,IAAGC,EAAGA,EAAIQ,GACnC,CACAC,UAAAA,CAAWC,GACP,GAAIP,MAAMM,WAAWC,GACjB,OAAO,EAEX,MAAMC,EAAOD,EAAOE,EAASF,EAAOG,EAAS,CACzCd,EAAGW,EAAMI,SAASf,EAAIK,KAAKF,WAAWK,MACtCP,EAAGU,EAAMI,SAASd,EAAII,KAAKF,WAAWM,QAE1C,QAAsBO,IAAlBH,EAAOX,OAAsB,CAC7B,MAAMe,EAAe,IAAInB,EAAAA,GAAOgB,EAAOd,EAAGc,EAAOb,EAAGY,EAAOX,OAASN,GACpE,OAAOQ,MAAMM,WAAWO,EAC5B,CACK,QAAkBD,IAAdJ,EAAKM,KAAoB,CAC9B,MAAMC,EAAS,IAAIC,EAAAA,GAAUN,EAAOd,EAAGc,EAAOb,EAAGW,EAAKM,KAAKV,MAAQZ,EAAQgB,EAAKM,KAAKT,OAASb,GAC9F,OAAOQ,MAAMM,WAAWS,EAC5B,CACA,OAAO,CACX,E,aC7BJ,MAAME,EAAc,EAAGC,EAAgB,EAAGC,EAAS,CAC/CvB,EAAG,EACHC,EAAG,GACJuB,EAAc,EACjB,SAASC,EAAgBC,EAAMC,EAAMC,EAAazB,EAAY0B,GAC1D,MAAM,GAAEC,EAAE,GAAEC,EAAE,SAAEC,IAAaC,EAAAA,EAAAA,IAAaP,EAAMC,GAChD,IAAKE,GAAQG,GAAYJ,EACrB,OAAOI,EAEX,MAAME,EAAW,CACblC,EAAGmC,KAAKC,IAAIN,GACZ7B,EAAGkC,KAAKC,IAAIL,IACbM,EAAgB,CACfrC,EAAGmC,KAAKG,IAAIJ,EAASlC,EAAGG,EAAWK,MAAQ0B,EAASlC,GACpDC,EAAGkC,KAAKG,IAAIJ,EAASjC,EAAGE,EAAWM,OAASyB,EAASjC,IAEzD,OAAOkC,KAAKI,KAAKF,EAAcrC,GAAKqB,EAAcgB,EAAcpC,GAAKoB,EACzE,CACO,MAAMmB,UAAeC,EAAAA,GACxB1C,WAAAA,CAAY2C,GACRtC,MAAMsC,GACNrC,KAAKsC,UAAaC,IACd,IAAKA,EAAGC,QAAQC,MACZ,OAEJ,MAAMJ,EAAYrC,KAAK0C,cAAeC,EAAeJ,EAAGC,QAAQC,MAChE,IAAIG,OAAgCjC,IAApBgC,EAAaE,GACvBR,EAAUS,UAAUC,WACpBV,EAAUS,UAAUE,YAAYC,IAAIN,EAAaE,IACvD,GAAID,EACA,OAEJ,MAAMM,EAAWP,EAAaQ,MAC9BP,GAAYQ,EAAAA,EAAAA,IAAmBF,EAAUP,EAAaU,MAAOV,EAAaW,cAClD3C,IAApBgC,EAAaE,GACbR,EAAUS,UAAUC,WAAaH,EAGjCP,EAAUS,UAAUE,YAAYO,IAAIZ,EAAaE,GAAID,EACzD,EAEJ5C,KAAK0C,cAAgBL,CACzB,CACAmB,KAAAA,GACA,CACAC,IAAAA,GACIzD,KAAK0C,cAAcI,UAAUC,gBAAapC,EAC1CX,KAAK0C,cAAcI,UAAUE,YAAc,IAAIU,GACnD,CACAC,QAAAA,CAASpB,GACL,IAAKA,EAAGC,QAAQC,MACZ,OAEJF,EAAGE,MAAQ,GACX,MAAMpB,EAAOkB,EAAGqB,cAAevB,EAAYrC,KAAKqC,UAAWvC,EAAauC,EAAUwB,OAAOhD,KACzF,GAAIQ,EAAK1B,EAAIuB,EAAOvB,GAAK0B,EAAKzB,EAAIsB,EAAOtB,GAAKyB,EAAK1B,EAAIG,EAAWK,OAASkB,EAAKzB,EAAIE,EAAWM,OAC3F,OAEJ,MAAM0D,EAAWvB,EAAGC,QAAQC,MAAOsB,EAAaD,EAASE,QAASzC,EAAcgB,EAAG0B,OAAOC,eAAiB/C,EAAaK,EAAOsC,EAAStC,KACxI,IAAIlB,EAEAA,EADAkB,EACQ,IAAIhC,EAAW6B,EAAK1B,EAAG0B,EAAKzB,EAAG2B,EAAazB,GAG5C,IAAIL,EAAAA,GAAO4B,EAAK1B,EAAG0B,EAAKzB,EAAG2B,GAEvC,MAAM4C,EAAQ9B,EAAUS,UAAUsB,SAASD,MAAM7D,GACjD,IAAK,MAAM+D,KAAMF,EAAO,CACpB,MAAMG,EAAWD,EAAG7B,QAAQC,MAC5B,GAAIF,IAAO8B,IACNC,GAAUC,QACXT,EAASjB,KAAOyB,EAASzB,IACzBwB,EAAGG,UACHH,EAAGI,YACFJ,EAAG5B,OACJF,EAAGE,MAAMiC,MAAMC,GAAMA,EAAEC,cAAgBP,KACvCA,EAAG5B,MAAMiC,MAAMC,GAAMA,EAAEC,cAAgBrC,IACvC,SAEJ,MAAMjB,EAAO+C,EAAGT,cAChB,GAAItC,EAAK3B,EAAIuB,EAAOvB,GAAK2B,EAAK1B,EAAIsB,EAAOtB,GAAK0B,EAAK3B,EAAIG,EAAWK,OAASmB,EAAK1B,EAAIE,EAAWM,OAC3F,SAEJ,MAAMuB,EAAWP,EAAgBC,EAAMC,EAAMC,EAAazB,EAAY0B,GAAQ8C,EAAS9C,MACvF,GAAIG,EAAWJ,EACX,SAEJ,MAAMsD,GAAe5D,EAAgBU,EAAWJ,GAAewC,EAC/D/D,KAAKsC,UAAUC,GACfA,EAAGE,MAAMqC,KAAK,CACVF,YAAaP,EACbL,QAASa,GAEjB,CACJ,CACAE,SAAAA,CAAUC,GACN,QAASA,EAASxC,QAAQC,OAAO8B,MACrC,CACAU,oBAAAA,CAAqBzC,KAAY0C,GACxB1C,EAAQC,QACTD,EAAQC,MAAQ,IAAI0C,EAAAA,GAExB,IAAK,MAAMC,KAAUF,EACjB1C,EAAQC,MAAM4C,KAAKD,GAAQ3C,MAEnC,CACA6C,KAAAA,GACA,E","sources":["webpack://protfolio-front-1/./node_modules/@tsparticles/interaction-particles-links/browser/CircleWarp.js","webpack://protfolio-front-1/./node_modules/@tsparticles/interaction-particles-links/browser/Linker.js"],"sourcesContent":["import { Circle, Rectangle } from \"@tsparticles/engine\";\nconst double = 2;\nexport class CircleWarp extends Circle {\n    constructor(x, y, radius, canvasSize) {\n        super(x, y, radius);\n        this.canvasSize = canvasSize;\n        this.canvasSize = { ...canvasSize };\n    }\n    contains(point) {\n        const { width, height } = this.canvasSize, { x, y } = point;\n        return (super.contains(point) ||\n            super.contains({ x: x - width, y }) ||\n            super.contains({ x: x - width, y: y - height }) ||\n            super.contains({ x, y: y - height }));\n    }\n    intersects(range) {\n        if (super.intersects(range)) {\n            return true;\n        }\n        const rect = range, circle = range, newPos = {\n            x: range.position.x - this.canvasSize.width,\n            y: range.position.y - this.canvasSize.height,\n        };\n        if (circle.radius !== undefined) {\n            const biggerCircle = new Circle(newPos.x, newPos.y, circle.radius * double);\n            return super.intersects(biggerCircle);\n        }\n        else if (rect.size !== undefined) {\n            const rectSW = new Rectangle(newPos.x, newPos.y, rect.size.width * double, rect.size.height * double);\n            return super.intersects(rectSW);\n        }\n        return false;\n    }\n}\n","import { Circle, ParticlesInteractorBase, getDistances, getLinkRandomColor, } from \"@tsparticles/engine\";\nimport { CircleWarp } from \"./CircleWarp.js\";\nimport { Links } from \"./Options/Classes/Links.js\";\nconst squarePower = 2, opacityOffset = 1, origin = {\n    x: 0,\n    y: 0,\n}, minDistance = 0;\nfunction getLinkDistance(pos1, pos2, optDistance, canvasSize, warp) {\n    const { dx, dy, distance } = getDistances(pos1, pos2);\n    if (!warp || distance <= optDistance) {\n        return distance;\n    }\n    const absDiffs = {\n        x: Math.abs(dx),\n        y: Math.abs(dy),\n    }, warpDistances = {\n        x: Math.min(absDiffs.x, canvasSize.width - absDiffs.x),\n        y: Math.min(absDiffs.y, canvasSize.height - absDiffs.y),\n    };\n    return Math.sqrt(warpDistances.x ** squarePower + warpDistances.y ** squarePower);\n}\nexport class Linker extends ParticlesInteractorBase {\n    constructor(container) {\n        super(container);\n        this._setColor = (p1) => {\n            if (!p1.options.links) {\n                return;\n            }\n            const container = this.linkContainer, linksOptions = p1.options.links;\n            let linkColor = linksOptions.id === undefined\n                ? container.particles.linksColor\n                : container.particles.linksColors.get(linksOptions.id);\n            if (linkColor) {\n                return;\n            }\n            const optColor = linksOptions.color;\n            linkColor = getLinkRandomColor(optColor, linksOptions.blink, linksOptions.consent);\n            if (linksOptions.id === undefined) {\n                container.particles.linksColor = linkColor;\n            }\n            else {\n                container.particles.linksColors.set(linksOptions.id, linkColor);\n            }\n        };\n        this.linkContainer = container;\n    }\n    clear() {\n    }\n    init() {\n        this.linkContainer.particles.linksColor = undefined;\n        this.linkContainer.particles.linksColors = new Map();\n    }\n    interact(p1) {\n        if (!p1.options.links) {\n            return;\n        }\n        p1.links = [];\n        const pos1 = p1.getPosition(), container = this.container, canvasSize = container.canvas.size;\n        if (pos1.x < origin.x || pos1.y < origin.y || pos1.x > canvasSize.width || pos1.y > canvasSize.height) {\n            return;\n        }\n        const linkOpt1 = p1.options.links, optOpacity = linkOpt1.opacity, optDistance = p1.retina.linksDistance ?? minDistance, warp = linkOpt1.warp;\n        let range;\n        if (warp) {\n            range = new CircleWarp(pos1.x, pos1.y, optDistance, canvasSize);\n        }\n        else {\n            range = new Circle(pos1.x, pos1.y, optDistance);\n        }\n        const query = container.particles.quadTree.query(range);\n        for (const p2 of query) {\n            const linkOpt2 = p2.options.links;\n            if (p1 === p2 ||\n                !linkOpt2?.enable ||\n                linkOpt1.id !== linkOpt2.id ||\n                p2.spawning ||\n                p2.destroyed ||\n                !p2.links ||\n                p1.links.some((t) => t.destination === p2) ||\n                p2.links.some((t) => t.destination === p1)) {\n                continue;\n            }\n            const pos2 = p2.getPosition();\n            if (pos2.x < origin.x || pos2.y < origin.y || pos2.x > canvasSize.width || pos2.y > canvasSize.height) {\n                continue;\n            }\n            const distance = getLinkDistance(pos1, pos2, optDistance, canvasSize, warp && linkOpt2.warp);\n            if (distance > optDistance) {\n                continue;\n            }\n            const opacityLine = (opacityOffset - distance / optDistance) * optOpacity;\n            this._setColor(p1);\n            p1.links.push({\n                destination: p2,\n                opacity: opacityLine,\n            });\n        }\n    }\n    isEnabled(particle) {\n        return !!particle.options.links?.enable;\n    }\n    loadParticlesOptions(options, ...sources) {\n        if (!options.links) {\n            options.links = new Links();\n        }\n        for (const source of sources) {\n            options.links.load(source?.links);\n        }\n    }\n    reset() {\n    }\n}\n"],"names":["double","CircleWarp","Circle","constructor","x","y","radius","canvasSize","super","this","contains","point","width","height","intersects","range","rect","circle","newPos","position","undefined","biggerCircle","size","rectSW","Rectangle","squarePower","opacityOffset","origin","minDistance","getLinkDistance","pos1","pos2","optDistance","warp","dx","dy","distance","getDistances","absDiffs","Math","abs","warpDistances","min","sqrt","Linker","ParticlesInteractorBase","container","_setColor","p1","options","links","linkContainer","linksOptions","linkColor","id","particles","linksColor","linksColors","get","optColor","color","getLinkRandomColor","blink","consent","set","clear","init","Map","interact","getPosition","canvas","linkOpt1","optOpacity","opacity","retina","linksDistance","query","quadTree","p2","linkOpt2","enable","spawning","destroyed","some","t","destination","opacityLine","push","isEnabled","particle","loadParticlesOptions","sources","Links","source","load","reset"],"sourceRoot":""}